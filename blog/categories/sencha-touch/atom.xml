<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Sencha Touch | Maruku's Blog]]></title>
  <link href="http://marukulau.github.io/blog/categories/sencha-touch/atom.xml" rel="self"/>
  <link href="http://marukulau.github.io/"/>
  <updated>2014-05-14T23:01:09+08:00</updated>
  <id>http://marukulau.github.io/</id>
  <author>
    <name><![CDATA[Maruku Lau]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Shecha Touch实例学习]]></title>
    <link href="http://marukulau.github.io/blog/2012/12/19/sdf/"/>
    <updated>2012-12-19T15:38:00+08:00</updated>
    <id>http://marukulau.github.io/blog/2012/12/19/sdf</id>
    <content type="html"><![CDATA[<p>通过前几篇文章的介绍，大家应该对Sencha Touch总体有了了解，现在已经可以开始做一些简单的应用。这一次我们要做的是一个简单通讯录应用。</p>

<!-- more -->


<h2>原型图</h2>

<p>开始工作之前我们先把思路整理一下，最好能先把原型图画一下。</p>

<h2>开始编码</h2>

<ul>
<li>创建名为AddressBook的Sencha Touch项目。</li>
<li>把准备好联系人数据文件contacts.json拷贝到项目根目录下。</li>
<li>修改app.json配置文件。</li>
</ul>


<p>缓存：
``` js</p>

<pre><code>"appCache": {
    /**
     * List of items in the CACHE MANIFEST section
     */
    "cache": [
        "index.html",
        "contacts.json" //加入新增的数据文件
    ],
</code></pre>

<p><code>
资源：
</code></p>

<pre><code> /**
 * Extra resources to be copied along when build
 */
"resources": [
    "contacts.json", //加入新增的数据文件
    "resources/images",
    "resources/icons",
    "resources/startup"
],
</code></pre>

<p>```</p>

<h3>修改app/view/Main.js文件</h3>

<p>```</p>

<pre><code>Ext.define('AddressBook.view.Main', {
    extend: 'Ext.navigation.View',
    xtype: 'mainview', //自定义xtype
    config: {
        scrollable: 'vertical',
        items: [
            {
                xtype: 'list',
                title: 'Contacts', //设置navigationView的title
                id: 'contact-list',
                itemTpl: [
                    '&lt;div&gt;&lt;img src=\'\' /&gt; {firstName}&amp;nbsp;{lastName}&lt;/div&gt;' //自定义list cell的模版
                ],
                store: 'contacts', //指定数据仓库
                grouped: true,
                indexBar: true
            }
        ]
    }

});
</code></pre>

<p><code>``
由于我们需要点击该列表进入对应的联系人详情页，所以应该选择navigation控件，把Main类的父类设为navigation.View:</code>extend: &lsquo;Ext.navigation.View&rsquo;`。</p>

<h3>新建app/store/contacts.js和app/model/ContactModel.js文件</h3>

<p><em>contacts.js：</em>
```</p>

<pre><code>Ext.define('AddressBook.store.contacts', {
    extend: 'Ext.data.Store',

    requires: [
        'AddressBook.model.ContactModel'
    ],

    config: {
        autoLoad: true,
        model: 'AddressBook.model.ContactModel',
        remoteSort: false,
        storeId: 'contacts',
        proxy: {
            type: 'ajax',
            url: 'contacts.json'
        },
        sorters: 'firstName',
        grouper: {
            groupFn: function(record) {
                return record.get('lastName')[0];
            }
        }

    }
});
</code></pre>

<p><code>
*ContactModel.js：*
</code></p>

<pre><code>Ext.define('AddressBook.model.ContactModel', {
    extend: 'Ext.data.Model',

    config: {
        fields: [
            'firstName',
            'lastName',
            'title'
        ]
    }
});
</code></pre>

<p>```</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[使用Sencha Touch 2.1进行iOS开发 —— 项目文件结构及代码分析]]></title>
    <link href="http://marukulau.github.io/blog/2012/12/19/shi-yong-sencha-touch-2-dot-1jin-xing-ioskai-fa-xiang-mu-wen-jian-ji-jie-gou-fen-xi/"/>
    <updated>2012-12-19T09:20:00+08:00</updated>
    <id>http://marukulau.github.io/blog/2012/12/19/shi-yong-sencha-touch-2-dot-1jin-xing-ioskai-fa-xiang-mu-wen-jian-ji-jie-gou-fen-xi</id>
    <content type="html"><![CDATA[<p>从第一篇文章我们知道了如何通过sencha命令创建Sencha Touch项目，而创建的项目里面已经包含了不少文件，如要开始写代码，我们有必要先了解所创建项目的文件结构及代码。</p>

<!-- more -->


<h2>文件结构</h2>

<p>在终端输入</p>

<pre><code>$ sencha generate app HelloWorld ~/Desktop/HelloWorld
</code></pre>

<p>我们创建了一个名为HelloWorld的项目，进入该文件夹可以看到文件如下：</p>

<pre><code>app/
    controller/
    model/
    profile/
    store/
    view/
        Main.js
app.js
app.json
build.xml
index.html
packager.json
resources/
touch/
</code></pre>

<ul>
<li>packager.json 一些sencha package命令要用到的文件，里面是一些编译打包配置信息。</li>
<li>app.js 包含了应用的初始化逻辑代码。</li>
<li>app.json 应用部署的配置。</li>
<li>app/ MVC结构的应用源代码文件。</li>
<li>resources/ 资源文件夹。</li>
<li>touch/ Sencha Touch SDK文件。</li>
</ul>


<h2>代码分析</h2>

<h3>应用入口</h3>

<p>app.js是应用的初始化文件，也就是意味着应用的入口在这里，打开该文件，我可以看到这一段代码：</p>

<pre><code>launch: function() {
    // Destroy the #appLoadingIndicator element
    Ext.fly('appLoadingIndicator').destroy();

    // Initialize the main view
    Ext.Viewport.add(Ext.create('HelloWorld.view.Main'));
},
</code></pre>

<p><code>Ext.create('HelloWorld.view.Main')</code>创建了一个HelloWorld.view.Main实例并加入到Viewport中，也就是说我们进入应用看到的主界面的代码源文件是app/view/Main.js文件。</p>

<h2>xtype</h2>

<p>打开Main.js文件，上一篇文章已经讲过类的定义了，所以HelloWorld.view.Main类的定义应该比较好理解。需要注意的是里面的<code>xtype: 'main'</code>属性，这个是定义当前类的xtype，方便被其他类用进行引用，而config下items的xtype则是对其他已定义xtype的类的引用。</p>

<p>下面是SDK所有的xtype及其对应的类：</p>

<pre><code>xtype                   Class
-----------------       ---------------------
actionsheet             Ext.ActionSheet
audio                   Ext.Audio
button                  Ext.Button
component               Ext.Component
container               Ext.Container
image                   Ext.Img
label                   Ext.Label
loadmask                Ext.LoadMask
map                     Ext.Map
mask                    Ext.Mask
media                   Ext.Media
panel                   Ext.Panel
segmentedbutton         Ext.SegmentedButton
sheet                   Ext.Sheet
spacer                  Ext.Spacer
title                   Ext.Title
titlebar                Ext.TitleBar
toolbar                 Ext.Toolbar
video                   Ext.Video
carousel                Ext.carousel.Carousel
carouselindicator       Ext.carousel.Indicator
navigationview          Ext.navigation.View
datepicker              Ext.picker.Date
picker                  Ext.picker.Picker
pickerslot              Ext.picker.Slot
slider                  Ext.slider.Slider
thumb                   Ext.slider.Thumb
tabbar                  Ext.tab.Bar
tabpanel                Ext.tab.Panel
tab                     Ext.tab.Tab
viewport                Ext.viewport.Default

DataView Components
---------------------------------------------
dataview                Ext.dataview.DataView
list                    Ext.dataview.List
listitemheader          Ext.dataview.ListItemHeader
nestedlist              Ext.dataview.NestedList
dataitem                Ext.dataview.component.DataItem

Form Components
---------------------------------------------
checkboxfield           Ext.field.Checkbox
datepickerfield         Ext.field.DatePicker
emailfield              Ext.field.Email
field                   Ext.field.Field
hiddenfield             Ext.field.Hidden
input                   Ext.field.Input
numberfield             Ext.field.Number
passwordfield           Ext.field.Password
radiofield              Ext.field.Radio
searchfield             Ext.field.Search
selectfield             Ext.field.Select
sliderfield             Ext.field.Slider
spinnerfield            Ext.field.Spinner
textfield               Ext.field.Text
textareafield           Ext.field.TextArea
textareainput           Ext.field.TextAreaInput
togglefield             Ext.field.Toggle
urlfield                Ext.field.Url
fieldset                Ext.form.FieldSet
formpanel               Ext.form.Panel
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[使用Sencha Touch 2.1进行iOS开发 —— 类的定义与使用]]></title>
    <link href="http://marukulau.github.io/blog/2012/12/18/shi-yong-sencha-touch-2-dot-1jin-xing-ioskai-fa-lei-ding-yi/"/>
    <updated>2012-12-18T13:57:00+08:00</updated>
    <id>http://marukulau.github.io/blog/2012/12/18/shi-yong-sencha-touch-2-dot-1jin-xing-ioskai-fa-lei-ding-yi</id>
    <content type="html"><![CDATA[<h2>类的定义</h2>

<p>Sencha Touch有自己的类定义方式，我们先来看个例子：
``` js</p>

<pre><code>Ext.define('Animal', {
    config: {
        name: null
    },

    constructor: function(config) {
        this.initConfig(config);
    },

    speak: function() {
        alert('grunt');
    }
});
</code></pre>

<p>```
上面我们简单地定义了一个Animal类，只有一个name属性和一个方法speak();</p>

<!-- more -->


<h2>类的继承</h2>

<p>``` js</p>

<pre><code>Ext.define('Human', {
    extend: 'Animal',

    speak: function() {
        alert(this.getName());
    }
});
</code></pre>

<p>```
我们定义了一个Human类继承自Animal，并重写speak()方法。</p>

<h2>类的实例化</h2>

<p>``` js</p>

<pre><code>var bob = Ext.create('Human', {
    name: 'Bob'
});

bob.speak(); //alerts 'Bob'
</code></pre>

<p>```
通过Ext.create()静态方法创建类实例。</p>

<h2>getter和setter方法</h2>

<p>对应的属性会自动生成getter和setter方法，如上面继承的例子中的this.getName()，setter方法为：this.setName(&lsquo;&rsquo;)。<br/>
``` js</p>

<pre><code>Ext.define('Human', {
    extend: 'Animal',

    applyName: function(newName, oldName) {
        return confirm('Are you sure you want to change name to ' + newName + '?')? newName : oldName;
    }
});
</code></pre>

<p><code>
applyName()方法是在调用setter方法后自动回调的方法，上面例子将在调用setter方法后弹出确认窗口询问是否修改name的值，点击no的话则不进行修改。  
</code> js</p>

<pre><code>Ext.define('Human', {
    extend: 'Animal',

    updateName: function(newName, oldName) {
        alert('Name changed. New name is: ' + newName);
    }
});
</code></pre>

<p>```
updateName()方法则是在调用setter方法后并且改属性值已经修改了的情况下自动回调的。</p>

<h2>依赖和动态加载</h2>

<p>有时候我们需要在类里面使用某个类的，这时候我们需要加入这个类的引用声明：requires: &lsquo;Ext.MessageBox'。
``` js</p>

<pre><code>Ext.define('Human', {
    extend: 'Animal',

    requires: 'Ext.MessageBox',

    speak: function() {
        Ext.Msg.alert(this.getName(), "Speaks...");
    }
});
</code></pre>

<p>```
加入引用声明后，Sencha Touch会自动判断是否Ext.MessageBox已经加载，如果未加载的话则会自动通过AJAX加载对应的类文件。</p>

<h2>命名空间</h2>

<p>以上一篇文章的Main.js文件为例
``` js</p>

<pre><code>Ext.define('HelloSenCha.view.Main', {
    extend: 'Ext.navigation.View',
    xtype: 'mainview',

    requires: [
        'HelloSenCha.view.Contacts',
        'HelloSenCha.view.contact.Show',
        'HelloSenCha.view.contact.Edit'
    ],
...
</code></pre>

<p>```
类名规则为：项目名称.目录1.目录2&hellip;类名，也就是说，Main.js和Contacts.js文件在view文件夹下，Show.js和Edit.js在view/contact文件夹下。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[使用Sencha Touch 2.1进行iOS开发 —— 开发环境搭建]]></title>
    <link href="http://marukulau.github.io/blog/2012/12/14/shi-yong-sencha-touch-2-dot-1jin-xing-ioskai-fa-kai-fa-huan-jing-da-jian/"/>
    <updated>2012-12-14T15:36:00+08:00</updated>
    <id>http://marukulau.github.io/blog/2012/12/14/shi-yong-sencha-touch-2-dot-1jin-xing-ioskai-fa-kai-fa-huan-jing-da-jian</id>
    <content type="html"><![CDATA[<p>最近由于要用到Sencha Touch 2.1进行项目的开发，于是开始了对Sencha Touch的学习，学习Sencha Touch第一步当然是搭建开发环境。</p>

<h2>开发环境搭建</h2>

<h3>Sencha iOS开发基本环境</h3>

<ul>
<li>Mac OSX</li>
<li>Xcode</li>
<li>Sencha Touch SDK</li>
</ul>


<!-- more -->


<h3>Sencha Touch SDK下载</h3>

<p>开发环境搭建的第一步当然就是下载SDK，Sencha Touch 2.1的SDK可以到官网下载：<a href="http://www.sencha.com/products/touch/download/">下载页面</a>, 这里需要填个邮箱地址，随便填一个地址就可以了，会自动跳转到下载页面。</p>

<h3>创建Sencha iOS项目</h3>

<p>SDk下载好了之后就可以通过PhoneGap或者直接自己建个项目在webView里面加载Sencha页面就可以了。事实上还有第三种方法，就是Sencha Cmd，官方对Sencha Cmd的介绍是：</p>

<blockquote><p>Sencha Cmd is a cross-platform command line tool that provides many automated tasks around the full life-cycle of your applications, from generating a new project to deploying an application to production.</p></blockquote>

<p>也就是说，我们可以直接使用Sencha Cmd这个工具进行全生命周期的应用开发。另外，官网还有个Sencha SDK Tools，不过官网也建议：</p>

<blockquote><p>Please note: Sencha SDK Tools are designed to be used with Sencha Touch 2 and Ext JS 4.0 and are deprecated for the most current framework releases. For the current version of Sencha’s build tools, please refer to Sencha Cmd, our unified tool for Sencha’s JavaScript frameworks.</p></blockquote>

<p>所以还是老老实实下载Sencha Cmd吧，Sencha Cmd <a href="http://www.sencha.com/products/sencha-cmd/download">下载地址</a>。</p>

<p>下载后安装好就可以打开终端敲命令进行创建Sencha项目了，我们把项目创建在桌面，项目名称为HelloSencha，命令如下：</p>

<pre><code>$ sencha generate app HelloSenCha ~/Desktop/HelloSenCha

Sencha Cmd v3.0.0.250
[INF]       init-properties:
[INF]       init-sencha-command:
[INF]       init:
[INF]       -before-generate-workspace:
[INF]       generate-workspace-impl:
[WRN]       Ignoring @require ../version/Version.js in js/String.js
[WRN]       Ignoring @require ../Ext-more.js in js/Format.js
[INF]       -before-copy-framework-to-workspace:
[INF]       copy-framework-to-workspace-impl:
</code></pre>

<p>等命令执行完毕后，到桌面就可以看到创建好的项目了。</p>

<h3>编译项目</h3>

<p>无需通过Xcode，我们就可以直接执行命令进行编译，编译结果将放在../build 文件夹下。</p>

<pre><code>$ sencha package build ~/Desktop/HelloSenCha/packager.json
</code></pre>

<h3>运行项目</h3>

<p>同样，我们无需打开Xcode，直接通过命令就可以把我们刚才创建的项目在iOS模拟器里面运行起来：</p>

<pre><code>$ sencha package run ~/Desktop/HelloSenCha/packager.json
</code></pre>

<p>现在，我们已经知道了怎么创建、编译和部署项目了，接下来就可以进行Sencha Touch SDK的学习了。</p>
]]></content>
  </entry>
  
</feed>
